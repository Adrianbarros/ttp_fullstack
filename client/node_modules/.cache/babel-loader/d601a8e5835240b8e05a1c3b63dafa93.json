{"ast":null,"code":"import axios from'axios';import{returnErrors}from'./errorActions';import{USER_LOADED,USER_LOADING,AUTH_ERROR,LOGIN_SUCCESS,LOGIN_FAIL,REGISTER_FAIL,REGISTER_SUCCESS,LOGOUT_SUCCESS}from'./types';//Check token && load User\nexport var loadUser=function loadUser(){return function(dispatch,getState){//User loading\ndispatch({type:USER_LOADING});axios.get('/api/auth/user',tokenConfig(getState)).then(function(res){return dispatch({type:USER_LOADED,payload:res.data});}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status));dispatch({type:AUTH_ERROR});});};};//register user\nexport var register=function register(_ref){var name=_ref.name,email=_ref.email,password=_ref.password;return function(dispatch){//Headers\nvar config={headers:{'Content-Type':'application/json'}};var body=JSON.stringify({name:name,email:email,password:password});axios.post('/api/users',body,config).then(function(res){return dispatch({type:REGISTER_SUCCESS,payload:res.data});}).catch(function(err){dispatch(returnErrors(err.response.data,err.response.status,'REGISTER_FAIL'));dispatch({type:REGISTER_FAIL});});};};//set up config\nexport var tokenConfig=function tokenConfig(getState){//get token\nvar token=getState().auth.token;//header\nvar config={header:{\"Content-type\":\"application/json\"}};//add token to header\nif(token){config.header['x-auth-token']=token;}return config;};","map":{"version":3,"sources":["/Users/adrianbarros/Documents/ttp_fullstack/ttp_fullstack/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_FAIL","REGISTER_SUCCESS","LOGOUT_SUCCESS","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","config","headers","body","JSON","stringify","post","token","auth","header"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,OAASC,YAAT,KAA6B,gBAA7B,CACA,OACIC,WADJ,CAEIC,YAFJ,CAGIC,UAHJ,CAIIC,aAJJ,CAKIC,UALJ,CAMIC,aANJ,CAOIC,gBAPJ,CAQIC,cARJ,KAUO,SAVP,CAYA;AAEA,MAAO,IAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,SAAM,UAACC,QAAD,CAAWC,QAAX,CAAwB,CAClD;AACAD,QAAQ,CAAC,CAAEE,IAAI,CAAEV,YAAR,CAAD,CAAR,CAGAH,KAAK,CAACc,GAAN,CAAU,gBAAV,CAA4BC,WAAW,CAACH,QAAD,CAAvC,EACKI,IADL,CACU,SAAAC,GAAG,QAAIN,CAAAA,QAAQ,CAAC,CAClBE,IAAI,CAAEX,WADY,CAElBgB,OAAO,CAAED,GAAG,CAACE,IAFK,CAAD,CAAZ,EADb,EAKKC,KALL,CAKW,SAAAC,GAAG,CAAI,CACVV,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR,CACAZ,QAAQ,CAAC,CACLE,IAAI,CAAET,UADD,CAAD,CAAR,CAIH,CAXL,EAcH,CAnBuB,EAAjB,CAoBP;AACA,MAAO,IAAMoB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,UAAGC,CAAAA,IAAH,MAAGA,IAAH,CAASC,KAAT,MAASA,KAAT,CAAgBC,QAAhB,MAAgBA,QAAhB,OAA+B,UAAAhB,QAAQ,CAAI,CAC/D;AACA,GAAMiB,CAAAA,MAAM,CAAG,CACXC,OAAO,CAAE,CACL,eAAgB,kBADX,CADE,CAAf,CAKA,GAAMC,CAAAA,IAAI,CAAGC,IAAI,CAACC,SAAL,CAAe,CAAEP,IAAI,CAAJA,IAAF,CAAQC,KAAK,CAALA,KAAR,CAAeC,QAAQ,CAARA,QAAf,CAAf,CAAb,CACA3B,KAAK,CAACiC,IAAN,CAAW,YAAX,CAAyBH,IAAzB,CAA+BF,MAA/B,EACKZ,IADL,CACU,SAAAC,GAAG,QAAIN,CAAAA,QAAQ,CAAC,CAClBE,IAAI,CAAEL,gBADY,CAElBU,OAAO,CAAED,GAAG,CAACE,IAFK,CAAD,CAAZ,EADb,EAKKC,KALL,CAKW,SAAAC,GAAG,CAAI,CACVV,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,CAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAyC,eAAzC,CAAb,CAAR,CACAZ,QAAQ,CAAC,CACLE,IAAI,CAAEN,aADD,CAAD,CAAR,CAGH,CAVL,EAWH,CAnBuB,EAAjB,CAoBP;AACA,MAAO,IAAMQ,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAAAH,QAAQ,CAAI,CACnC;AACA,GAAMsB,CAAAA,KAAK,CAAGtB,QAAQ,GAAGuB,IAAX,CAAgBD,KAA9B,CACA;AACA,GAAMN,CAAAA,MAAM,CAAG,CACXQ,MAAM,CAAE,CACJ,eAAgB,kBADZ,CADG,CAAf,CAMA;AACA,GAAIF,KAAJ,CAAW,CACPN,MAAM,CAACQ,MAAP,CAAc,cAAd,EAAgCF,KAAhC,CACH,CACD,MAAON,CAAAA,MAAP,CACH,CAfM","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions'\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    REGISTER_FAIL,\n    REGISTER_SUCCESS,\n    LOGOUT_SUCCESS\n\n} from './types';\n\n//Check token && load User\n\nexport const loadUser = () => (dispatch, getState) => {\n    //User loading\n    dispatch({ type: USER_LOADING });\n\n\n    axios.get('/api/auth/user', tokenConfig(getState))\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n\n        });\n\n\n};\n//register user\nexport const register = ({ name, email, password }) => dispatch => {\n    //Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({ name, email, password });\n    axios.post('/api/users', body, config)\n        .then(res => dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n            dispatch({\n                type: REGISTER_FAIL\n            });\n        });\n}\n//set up config\nexport const tokenConfig = getState => {\n    //get token\n    const token = getState().auth.token;\n    //header\n    const config = {\n        header: {\n            \"Content-type\": \"application/json\"\n\n        }\n    }\n    //add token to header\n    if (token) {\n        config.header['x-auth-token'] = token;\n    }\n    return config;\n}"]},"metadata":{},"sourceType":"module"}