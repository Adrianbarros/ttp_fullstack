{"ast":null,"code":"import axios from 'axios';\nimport { returnErrors } from './errorActions';\nimport { USER_LOADED, USER_LOADING, AUTH_ERROR, LOGIN_SUCCESS, LOGIN_FAIL, REGISTER_FAIL, REGISTER_SUCCESS, LOGOUT_SUCCESS } from './types'; //Check token && load User\n\nexport const loadUser = () => (dispatch, getState) => {\n  //User loading\n  dispatch({\n    type: USER_LOADING\n  });\n  axios.get('/api/auth/user', tokenConfig(getState)).then(res => dispatch({\n    type: USER_LOADED,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status));\n    dispatch({\n      type: AUTH_ERROR\n    });\n  });\n}; //register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => dispatch => {\n  //Headers\n  const config = {\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const body = JSON.stringify({\n    name,\n    email,\n    password\n  });\n  axios.post('/api/users', body, config).then(res => dispatch({\n    type: REGISTER_SUCCESS,\n    payload: res.data\n  })).catch(err => {\n    dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  });\n}; //set up config\n\nexport const tokenConfig = getState => {\n  //get token\n  const token = getState().auth.token; //header\n\n  const config = {\n    header: {\n      \"Content-type\": \"application/json\"\n    }\n  }; //add token to header\n\n  if (token) {\n    config.header['x-auth-token'] = token;\n  }\n\n  return config;\n};","map":{"version":3,"sources":["/Users/adrianbarros/Documents/ttp_fullstack/ttp_fullstack/client/src/actions/authActions.js"],"names":["axios","returnErrors","USER_LOADED","USER_LOADING","AUTH_ERROR","LOGIN_SUCCESS","LOGIN_FAIL","REGISTER_FAIL","REGISTER_SUCCESS","LOGOUT_SUCCESS","loadUser","dispatch","getState","type","get","tokenConfig","then","res","payload","data","catch","err","response","status","register","name","email","password","config","headers","body","JSON","stringify","post","token","auth","header"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SACIC,WADJ,EAEIC,YAFJ,EAGIC,UAHJ,EAIIC,aAJJ,EAKIC,UALJ,EAMIC,aANJ,EAOIC,gBAPJ,EAQIC,cARJ,QAUO,SAVP,C,CAYA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,MAAM,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAClD;AACAD,EAAAA,QAAQ,CAAC;AAAEE,IAAAA,IAAI,EAAEV;AAAR,GAAD,CAAR;AAGAH,EAAAA,KAAK,CAACc,GAAN,CAAU,gBAAV,EAA4BC,WAAW,CAACH,QAAD,CAAvC,EACKI,IADL,CACUC,GAAG,IAAIN,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEX,WADY;AAElBgB,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFK,GAAD,CADzB,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAET;AADD,KAAD,CAAR;AAIH,GAXL;AAcH,CAnBM,C,CAoBP;;AACA,OAAO,MAAMoB,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+BhB,QAAQ,IAAI;AAC/D;AACA,QAAMiB,MAAM,GAAG;AACXC,IAAAA,OAAO,EAAE;AACL,sBAAgB;AADX;AADE,GAAf;AAKA,QAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AAAEP,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA;AAAf,GAAf,CAAb;AACA3B,EAAAA,KAAK,CAACiC,IAAN,CAAW,YAAX,EAAyBH,IAAzB,EAA+BF,MAA/B,EACKZ,IADL,CACUC,GAAG,IAAIN,QAAQ,CAAC;AAClBE,IAAAA,IAAI,EAAEL,gBADY;AAElBU,IAAAA,OAAO,EAAED,GAAG,CAACE;AAFK,GAAD,CADzB,EAKKC,KALL,CAKWC,GAAG,IAAI;AACVV,IAAAA,QAAQ,CAACV,YAAY,CAACoB,GAAG,CAACC,QAAJ,CAAaH,IAAd,EAAoBE,GAAG,CAACC,QAAJ,CAAaC,MAAjC,EAAyC,eAAzC,CAAb,CAAR;AACAZ,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEN;AADD,KAAD,CAAR;AAGH,GAVL;AAWH,CAnBM,C,CAoBP;;AACA,OAAO,MAAMQ,WAAW,GAAGH,QAAQ,IAAI;AACnC;AACA,QAAMsB,KAAK,GAAGtB,QAAQ,GAAGuB,IAAX,CAAgBD,KAA9B,CAFmC,CAGnC;;AACA,QAAMN,MAAM,GAAG;AACXQ,IAAAA,MAAM,EAAE;AACJ,sBAAgB;AADZ;AADG,GAAf,CAJmC,CAUnC;;AACA,MAAIF,KAAJ,EAAW;AACPN,IAAAA,MAAM,CAACQ,MAAP,CAAc,cAAd,IAAgCF,KAAhC;AACH;;AACD,SAAON,MAAP;AACH,CAfM","sourcesContent":["import axios from 'axios';\nimport { returnErrors } from './errorActions'\nimport {\n    USER_LOADED,\n    USER_LOADING,\n    AUTH_ERROR,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    REGISTER_FAIL,\n    REGISTER_SUCCESS,\n    LOGOUT_SUCCESS\n\n} from './types';\n\n//Check token && load User\n\nexport const loadUser = () => (dispatch, getState) => {\n    //User loading\n    dispatch({ type: USER_LOADING });\n\n\n    axios.get('/api/auth/user', tokenConfig(getState))\n        .then(res => dispatch({\n            type: USER_LOADED,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status));\n            dispatch({\n                type: AUTH_ERROR\n            });\n\n        });\n\n\n};\n//register user\nexport const register = ({ name, email, password }) => dispatch => {\n    //Headers\n    const config = {\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n    const body = JSON.stringify({ name, email, password });\n    axios.post('/api/users', body, config)\n        .then(res => dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        }))\n        .catch(err => {\n            dispatch(returnErrors(err.response.data, err.response.status, 'REGISTER_FAIL'));\n            dispatch({\n                type: REGISTER_FAIL\n            });\n        });\n}\n//set up config\nexport const tokenConfig = getState => {\n    //get token\n    const token = getState().auth.token;\n    //header\n    const config = {\n        header: {\n            \"Content-type\": \"application/json\"\n\n        }\n    }\n    //add token to header\n    if (token) {\n        config.header['x-auth-token'] = token;\n    }\n    return config;\n}"]},"metadata":{},"sourceType":"module"}